{"uid":"e7681ce5bd41b976","name":"test_CredKart_Login_params_003[getdataForLogin2]","fullName":"Testcase.test_Credkart_login_params.Test_CredKart_Login_params#test_CredKart_Login_params_003","historyId":"9b2cdbb6a0fcfc7473ef9ebf27236f29","time":{"start":1691603965853,"stop":1691603974205,"duration":8352},"status":"failed","statusMessage":"AssertionError: assert False","statusTrace":"self = <test_Credkart_login_params.Test_CredKart_Login_params object at 0x000001CBEF444990>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b7b8d211e170a1c759e3326d038960f8\")>\ngetdataForLogin = ('Credencetest@test.com', 'Credence@1234')\n\n    def test_CredKart_Login_params_003(self, setup, getdataForLogin):\n        self.driver=setup\n        self.driver.get(\"https://automation.credence.in/login\")\n        self.driver.find_element(By.XPATH, \"//input[@name='email']\").send_keys(getdataForLogin[0])\n        self.driver.find_element(By.CSS_SELECTOR, \"input[id='password']\").send_keys(getdataForLogin[1])\n        self.driver.find_element(By.XPATH,\"//button[@type='submit']\").click()\n        time.sleep(3)\n        try:\n>           self.driver.find_element(By.XPATH,\"//h2[normalize-space()='CredKart']\")\n\nTestcase\\test_Credkart_login_params.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:740: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001CBEE1BA110>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x771E7B1E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x771E7AEE+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//h2[normalize-space()='CredKart']\"}\nE         (Session info: chrome=115.0.5790.171); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x0035A813+48355]\nE       \t(No symbol) [0x002EC4B1]\nE       \t(No symbol) [0x001F5358]\nE       \t(No symbol) [0x002209A5]\nE       \t(No symbol) [0x00220B3B]\nE       \t(No symbol) [0x0024E232]\nE       \t(No symbol) [0x0023A784]\nE       \t(No symbol) [0x0024C922]\nE       \t(No symbol) [0x0023A536]\nE       \t(No symbol) [0x002182DC]\nE       \t(No symbol) [0x002193DD]\nE       \tGetHandleVerifier [0x005BAABD+2539405]\nE       \tGetHandleVerifier [0x005FA78F+2800735]\nE       \tGetHandleVerifier [0x005F456C+2775612]\nE       \tGetHandleVerifier [0x003E51E0+616112]\nE       \t(No symbol) [0x002F5F8C]\nE       \t(No symbol) [0x002F2328]\nE       \t(No symbol) [0x002F240B]\nE       \t(No symbol) [0x002E4FF7]\nE       \tBaseThreadInitThunk [0x75E300C9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x771E7B1E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x771E7AEE+238]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_Credkart_login_params.Test_CredKart_Login_params object at 0x000001CBEF444990>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b7b8d211e170a1c759e3326d038960f8\")>\ngetdataForLogin = ('Credencetest@test.com', 'Credence@1234')\n\n    def test_CredKart_Login_params_003(self, setup, getdataForLogin):\n        self.driver=setup\n        self.driver.get(\"https://automation.credence.in/login\")\n        self.driver.find_element(By.XPATH, \"//input[@name='email']\").send_keys(getdataForLogin[0])\n        self.driver.find_element(By.CSS_SELECTOR, \"input[id='password']\").send_keys(getdataForLogin[1])\n        self.driver.find_element(By.XPATH,\"//button[@type='submit']\").click()\n        time.sleep(3)\n        try:\n            self.driver.find_element(By.XPATH,\"//h2[normalize-space()='CredKart']\")\n            print(\"login pass\")\n            self.driver.save_screenshot(\"C:\\\\Users\\\\Ankush\\\\PycharmProjects\\\\Credkart_Automation_practice\\\\Screenshots\\\\\"+getdataForLogin[0]+\"_\"+getdataForLogin[1]+\"_\"+\"test_login2Pass.PNG\")\n            assert True\n            self.driver.close()\n        except:\n            print(\"login Fail\")\n            self.driver.save_screenshot(\"C:\\\\Users\\\\Ankush\\\\PycharmProjects\\\\Credkart_Automation_practice\\\\Screenshots\\\\\"+getdataForLogin[0]+\"_\"+getdataForLogin[1]+\"_\"+\"test_login2Pass.PNG\")\n>           assert False\nE           assert False\n\nTestcase\\test_Credkart_login_params.py:25: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1691603949463,"stop":1691603965846,"duration":16383},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"getdataForLogin","time":{"start":1691603965847,"stop":1691603965848,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false}],"afterStages":[],"labels":[{"name":"parentSuite","value":"Testcase"},{"name":"suite","value":"test_Credkart_login_params"},{"name":"subSuite","value":"Test_CredKart_Login_params"},{"name":"host","value":"ANKUSH-PC"},{"name":"thread","value":"5848-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Testcase.test_Credkart_login_params"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"getdataForLogin","value":"('Credencetest@test.com', 'Credence@1234')"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"e7681ce5bd41b976.json","parameterValues":["('Credencetest@test.com', 'Credence@1234')"]}